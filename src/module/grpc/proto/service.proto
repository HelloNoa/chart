syntax = "proto3";
package finexblock;
option go_package = "./finexblock";

import "message.proto";

service MarketOrder {
	rpc MarketBidInit(MarketOrderInput) returns (Ack);
}

service LimitOrder {
	rpc LimitOrderInit(LimitOrderInput) returns (Ack);
}

service CancelOrder {
	rpc CancelOrder(OrderCancellation) returns (Ack);
}


service Event {
	rpc OrderPlacementEvent(OrderPlacement) returns (Ack);
	rpc OrderPlacementFailedEvent(OrderPlacementFailed) returns (Ack);
	rpc OrderCancellationEvent(OrderCancellation) returns (Ack);
	rpc OrderCancellationFailedEvent(OrderCancellationFailed) returns (Ack);
	rpc OrderMatchingEvent (OrderMatching) returns (Ack);
	rpc OrderMatchingFailedEvent (OrderMatchingFailed) returns (Ack);
	rpc OrderPartialFillEvent (OrderPartialFill) returns (Ack);
	rpc OrderFulfillmentEvent (OrderFulfillment) returns (Ack);
	rpc OrderInitializeEvent (OrderInitialize) returns (Ack);
}

service LifeCycle {
	rpc StartEngine(StartEngineInput) returns(StartEngineOutput);
	rpc StopEngine(StopEngineInput) returns(StopEngineOutput);
}